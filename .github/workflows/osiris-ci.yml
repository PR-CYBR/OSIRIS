name: OSIRIS CI/CD Workflow

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  # Job 1: Run branch-specific tests
  test:
    name: Run Tests on ${{ github.ref_name }}
    runs-on: ubuntu-latest
    outputs:
      test-result: ${{ steps.run-tests.outputs.result }}
      test-summary: ${{ steps.run-tests.outputs.summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Run comprehensive test suite
        id: run-tests
        run: |
          set +e
          tests/run-tests.sh
          exit_code=$?
          set -e

          if [ -f test-results/summary.md ]; then
            summary_line=$(tr '\n' ' ' < test-results/summary.md | sed 's/  */ /g')
          else
            summary_line="No summary produced"
          fi

          if [ "$exit_code" -eq 0 ]; then
            echo "result=success" >> "$GITHUB_OUTPUT"
          else
            echo "result=failure" >> "$GITHUB_OUTPUT"
          fi

          echo "summary=${summary_line}" >> "$GITHUB_OUTPUT"
          exit "$exit_code"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.ref_name }}-${{ github.run_number }}
          path: test-results/

  # Job 2: Create issue for failed tests
  create-issue-on-failure:
    name: Create Issue for Test Failures
    runs-on: ubuntu-latest
    needs: test
    if: failure() && needs.test.outputs.test-result != 'success'
    steps:
      - name: Create issue for failed tests
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Failure on ${context.ref.replace('refs/heads/', '')}`,
              body: `## Test Failure Report
              
              **Branch**: ${context.ref.replace('refs/heads/', '')}
              **Commit**: ${context.sha}
              **Workflow Run**: ${context.runNumber}
              **Run URL**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ### Summary
              ${{ needs.test.outputs.test-summary || 'Tests failed. Please review the workflow logs for details.' }}
              
              ### Action Required
              - Review the failed tests in the workflow logs
              - Fix the failing tests
              - Re-run the workflow or push a new commit
              
              **Auto-generated by OSIRIS CI/CD Workflow**`,
              labels: ['test-failure', 'automated']
            });
            console.log(`Created issue #${issue.data.number}`);

  # Job 3: Create auto-PR for successful branches
  create-auto-pr:
    name: Create Auto-PR for Successful Branch
    runs-on: ubuntu-latest
    needs: test
    if: success() && needs.test.outputs.test-result == 'success' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if PR already exists
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              console.log(`PR already exists: #${prs[0].number}`);
              core.setOutput('exists', 'true');
              core.setOutput('pr_number', prs[0].number);
            } else {
              core.setOutput('exists', 'false');
            }

      - name: Create Pull Request
        if: steps.check-pr.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            let targetBranch = 'develop';
            
            // Determine target branch based on source branch
            if (branch.startsWith('feature/') || branch.startsWith('bugfix/')) {
              targetBranch = 'develop';
            }
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Auto-PR: Merge ${branch} (Tests Passed)`,
              head: branch,
              base: targetBranch,
              body: `## Automated Pull Request
              
              This PR was automatically created because all tests passed on branch \`${branch}\`.
              
              ### Test Results
              - âœ… All tests passed
              - **Branch**: ${branch}
              - **Commit**: ${context.sha}
              - **Workflow Run**: [View Results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              ### Next Steps
              - Review the changes
              - Approve and merge if everything looks good
              - Or request changes if needed
              
              **Auto-generated by OSIRIS CI/CD Workflow**`,
              draft: false
            });
            console.log(`Created PR #${pr.data.number}`);

  # Job 4: Update README with test summaries
  update-readme:
    name: Update README with Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.ref_name }}-${{ github.run_number }}
          path: test-results/

      - name: Update README with test summary
        run: |
          # Create test summary section
          TEST_SUMMARY_FILE="test-results/summary.md"
          
          # Check if README already has a test summary section
          if ! grep -q "## Latest Test Results" README.md; then
            echo "" >> README.md
            echo "## Latest Test Results" >> README.md
            echo "" >> README.md
          fi
          
          # Update or append test results
          if [ -f "$TEST_SUMMARY_FILE" ]; then
            # Create a temporary file with updated content
            awk '
              /## Latest Test Results/ {
                print;
                print "";
                print "Last updated: '"$(date -u +'%Y-%m-%d %H:%M:%S UTC')"'";
                print "";
                while ((getline line < "'"$TEST_SUMMARY_FILE"'") > 0) {
                  print line;
                }
                skip=1;
                next;
              }
              /^## / && skip {
                skip=0;
              }
              !skip || /^## / {
                print;
              }
            ' README.md > README.md.tmp
            
            mv README.md.tmp README.md
          fi

      - name: Commit and push README updates
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          if git diff --quiet README.md; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "Update README with test results from ${{ github.ref_name }} [skip ci]"
            git push
          fi

  # Job 5: Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, update-readme]
    if: success() && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.ref_name }}-${{ github.run_number }}
          path: docs/test-results/

      - name: Create GitHub Pages content
        run: |
          mkdir -p docs
          
          # Create index.html with test results
          cat > docs/index.html <<EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>OSIRIS - Test Results Dashboard</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background: #f5f5f5;
                  }
                  .header {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 40px;
                      border-radius: 10px;
                      margin-bottom: 30px;
                      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                  }
                  h1 { margin: 0; font-size: 2.5em; }
                  .subtitle { opacity: 0.9; margin-top: 10px; }
                  .container {
                      background: white;
                      padding: 30px;
                      border-radius: 10px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      margin-bottom: 20px;
                  }
                  .status-badge {
                      display: inline-block;
                      padding: 5px 15px;
                      border-radius: 20px;
                      font-weight: bold;
                      font-size: 0.9em;
                  }
                  .status-success { background: #10b981; color: white; }
                  .status-failure { background: #ef4444; color: white; }
                  .test-info { margin: 20px 0; }
                  .test-info dt {
                      font-weight: bold;
                      color: #667eea;
                      margin-top: 10px;
                  }
                  .test-info dd { margin-left: 0; padding-left: 20px; }
                  footer {
                      text-align: center;
                      color: #666;
                      margin-top: 40px;
                      padding: 20px;
                  }
                  a { color: #667eea; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>OSIRIS</h1>
                  <div class="subtitle">Platform for All-Domain Anomaly Tracking - Test Results Dashboard</div>
              </div>
              
              <div class="container">
                  <h2>Latest Test Results</h2>
                  <div class="test-info">
                      <dl>
                          <dt>Status</dt>
                          <dd><span class="status-badge status-success">âœ“ All Tests Passed</span></dd>
                          
                          <dt>Branch</dt>
                          <dd>${{ github.ref_name }}</dd>
                          
                          <dt>Commit</dt>
                          <dd><code>${{ github.sha }}</code></dd>
                          
                          <dt>Last Updated</dt>
                          <dd>$(date -u +'%Y-%m-%d %H:%M:%S UTC')</dd>
                          
                          <dt>Workflow Run</dt>
                          <dd><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" target="_blank">View Details</a></dd>
                      </dl>
                  </div>
              </div>
              
              <div class="container">
                  <h2>About OSIRIS</h2>
                  <p>OSIRIS is a platform for all-domain anomaly tracking, providing comprehensive testing and continuous integration capabilities.</p>
                  <p><a href="${{ github.server_url }}/${{ github.repository }}" target="_blank">View Repository on GitHub â†’</a></p>
              </div>
              
              <footer>
                  <p>Powered by GitHub Actions and GitHub Pages</p>
                  <p>Auto-generated by OSIRIS CI/CD Workflow</p>
              </footer>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

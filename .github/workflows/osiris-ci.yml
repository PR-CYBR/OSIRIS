name: OSIRIS CI/CD Workflow

on:
  push:
    branches:
      - main
      - dev
      - test
      - stage
      - prod
      - pages
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - dev
      - test
      - stage
      - prod
      - pages
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: osiris-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Run branch-specific tests
  test:
    name: Run Tests on ${{ github.ref_name }}
    runs-on: ubuntu-latest
    outputs:
      test-result: ${{ steps.run-tests.outputs.result }}
      test-summary: ${{ steps.run-tests.outputs.summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Run comprehensive test suite
        id: run-tests
        run: |
          set +e
          tests/run-tests.sh
          exit_code=$?
          set -e

          if [ -f test-results/summary.md ]; then
            summary_line=$(tr '\n' ' ' < test-results/summary.md | sed 's/  */ /g')
          else
            summary_line="No summary produced"
          fi

          if [ "$exit_code" -eq 0 ]; then
            echo "result=success" >> "$GITHUB_OUTPUT"
          else
            echo "result=failure" >> "$GITHUB_OUTPUT"
          fi

          echo "summary=${summary_line}" >> "$GITHUB_OUTPUT"
          exit "$exit_code"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.ref_name }}-${{ github.run_number }}
          path: test-results/

  # Job 2: Create issue for failed tests
  create-issue-on-failure:
    name: Create Issue for Test Failures
    runs-on: ubuntu-latest
    needs: test
    if: failure() && needs.test.outputs.test-result != 'success'
    steps:
      - name: Create issue for failed tests
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Failure on ${context.ref.replace('refs/heads/', '')}`,
              body: `## Test Failure Report

              **Branch**: ${context.ref.replace('refs/heads/', '')}
              **Commit**: ${context.sha}
              **Workflow Run**: ${context.runNumber}
              **Run URL**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

              ### Summary
              ${{ needs.test.outputs.test-summary || 'Tests failed. Please review the workflow logs for details.' }}

              ### Action Required
              - Review the failed tests in the workflow logs
              - Fix the failing tests
              - Re-run the workflow or push a new commit

              **Auto-generated by OSIRIS CI/CD Workflow**`,
              labels: ['test-failure', 'automated']
            });
            console.log(`Created issue #${issue.data.number}`);

  # Job 3: Create auto-PR for successful branches
  create-auto-pr:
    name: Create Auto-PR for Successful Branch
    runs-on: ubuntu-latest
    needs: test
    if: success() && needs.test.outputs.test-result == 'success' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Target Branch
        id: target
        run: |
          branch="${GITHUB_REF_NAME}"
          case "$branch" in
            dev)    echo "target=test" >> $GITHUB_OUTPUT ;;
            test)   echo "target=stage" >> $GITHUB_OUTPUT ;;
            stage)  echo "target=prod" >> $GITHUB_OUTPUT ;;
            prod)   echo "target=pages" >> $GITHUB_OUTPUT ;;
            *)      echo "target=main" >> $GITHUB_OUTPUT ;;
          esac

      - name: Check if PR already exists
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
            if (prs.length > 0) {
              core.setOutput('exists', 'true');
              core.setOutput('pr_number', prs[0].number);
            } else {
              core.setOutput('exists', 'false');
            }

      - name: Create Pull Request
        if: steps.check-pr.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const target = process.env.TARGET_BRANCH || '${{ steps.target.outputs.target }}';
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Auto-PR: Promote ${branch} → ${target}`,
              head: branch,
              base: target,
              body: `## Automated Promotion PR

              This PR was automatically created after successful tests on branch \`${branch}\`.

              ### Test Results
              - ✅ All tests passed
              - **Branch**: ${branch}
              - **Commit**: ${context.sha}
              - **Workflow Run**: [View Results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              ### Next Steps
              - Review the changes
              - Approve and merge if ready
              - Or request changes if needed

              **Auto-generated by OSIRIS CI/CD Workflow**`,
              draft: false
            });
            console.log(`Created PR #${pr.data.number}`);

  # Job 4: Update README with test summaries
  update-readme:
    name: Update README with Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: success() && (github.ref_name == 'main' || github.ref_name == 'prod')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.ref_name }}-${{ github.run_number }}
          path: test-results/

      - name: Update README with test summary
        run: |
          TEST_SUMMARY_FILE="test-results/summary.md"
          if ! grep -q "## Latest Test Results" README.md; then
            echo "" >> README.md
            echo "## Latest Test Results" >> README.md
            echo "" >> README.md
          fi
          if [ -f "$TEST_SUMMARY_FILE" ]; then
            awk '
              /## Latest Test Results/ {
                print;
                print "";
                print "Last updated: '"$(date -u +'%Y-%m-%d %H:%M:%S UTC')"'";
                print "";
                while ((getline line < "'"$TEST_SUMMARY_FILE"'") > 0) {
                  print line;
                }
                skip=1;
                next;
              }
              /^## / && skip { skip=0 }
              !skip || /^## / { print }
            ' README.md > README.tmp && mv README.tmp README.md
          fi

      - name: Commit and push README updates
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          if git diff --quiet README.md; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "Update README with test results from ${{ github.ref_name }} [skip ci]"
            git push
          fi

  # Job 5: Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, update-readme]
    if: success() && github.ref_name == 'pages'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: pages

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.ref_name }}-${{ github.run_number }}
          path: docs/test-results/

      - name: Build GitHub Pages content
        run: |
          mkdir -p docs
          echo "<h1>OSIRIS Production Dashboard</h1>" > docs/index.html
          echo "<p>Auto-generated build for pages branch at $(date -u)</p>" >> docs/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
